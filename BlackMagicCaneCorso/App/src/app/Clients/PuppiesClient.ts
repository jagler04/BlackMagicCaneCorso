/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v12.0.14.0 (NJsonSchema v9.13.18.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class PuppiesClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    requestAPuppy(frm: RegistrationForm): Observable<void> {
        let url_ = this.baseUrl + "/Puppies/Request";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(frm);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRequestAPuppy(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRequestAPuppy(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processRequestAPuppy(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    addPuppy(newDog: Dog): Observable<Dog[] | null> {
        let url_ = this.baseUrl + "/Puppies/Add";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(newDog);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddPuppy(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddPuppy(<any>response_);
                } catch (e) {
                    return <Observable<Dog[] | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<Dog[] | null>><any>_observableThrow(response_);
        }));
    }

    protected processAddPuppy(response: HttpResponseBase): Observable<Dog[] | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Dog.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Dog[] | null>(<any>null);
    }

    updatePuppy(updateDog: Dog): Observable<Dog[] | null> {
        let url_ = this.baseUrl + "/Puppies/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(updateDog);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdatePuppy(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdatePuppy(<any>response_);
                } catch (e) {
                    return <Observable<Dog[] | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<Dog[] | null>><any>_observableThrow(response_);
        }));
    }

    protected processUpdatePuppy(response: HttpResponseBase): Observable<Dog[] | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Dog.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Dog[] | null>(<any>null);
    }

    get(): Observable<Dog[] | null> {
        let url_ = this.baseUrl + "/Puppies/GetDogs";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<Dog[] | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<Dog[] | null>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<Dog[] | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Dog.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Dog[] | null>(<any>null);
    }

    getByGender(gender: string | null | undefined): Observable<Dog[] | null> {
        let url_ = this.baseUrl + "/Puppies/GetDogsByGender?";
        if (gender !== undefined)
            url_ += "gender=" + encodeURIComponent("" + gender) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetByGender(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetByGender(<any>response_);
                } catch (e) {
                    return <Observable<Dog[] | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<Dog[] | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetByGender(response: HttpResponseBase): Observable<Dog[] | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Dog.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Dog[] | null>(<any>null);
    }
}

export class RegistrationForm implements IRegistrationForm {
    firstName?: string | undefined;
    lastName?: string | undefined;
    street?: string | undefined;
    street2?: string | undefined;
    city?: string | undefined;
    state?: string | undefined;
    country?: string | undefined;
    zip?: string | undefined;
    email?: string | undefined;
    phone?: string | undefined;
    pronunciation!: boolean;
    companyHome?: string | undefined;
    preferedGender?: string | undefined;
    showCompetition?: string | undefined;
    agilityCompetition?: string | undefined;
    therapyDog?: string | undefined;
    emotionalSupport?: string | undefined;
    breeding?: string | undefined;
    couchBuddy?: string | undefined;

    constructor(data?: IRegistrationForm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.firstName = data["firstName"];
            this.lastName = data["lastName"];
            this.street = data["street"];
            this.street2 = data["street2"];
            this.city = data["city"];
            this.state = data["state"];
            this.country = data["country"];
            this.zip = data["zip"];
            this.email = data["email"];
            this.phone = data["phone"];
            this.pronunciation = data["pronunciation"];
            this.companyHome = data["companyHome"];
            this.preferedGender = data["preferedGender"];
            this.showCompetition = data["showCompetition"];
            this.agilityCompetition = data["agilityCompetition"];
            this.therapyDog = data["therapyDog"];
            this.emotionalSupport = data["emotionalSupport"];
            this.breeding = data["breeding"];
            this.couchBuddy = data["couchBuddy"];
        }
    }

    static fromJS(data: any): RegistrationForm {
        data = typeof data === 'object' ? data : {};
        let result = new RegistrationForm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["street"] = this.street;
        data["street2"] = this.street2;
        data["city"] = this.city;
        data["state"] = this.state;
        data["country"] = this.country;
        data["zip"] = this.zip;
        data["email"] = this.email;
        data["phone"] = this.phone;
        data["pronunciation"] = this.pronunciation;
        data["companyHome"] = this.companyHome;
        data["preferedGender"] = this.preferedGender;
        data["showCompetition"] = this.showCompetition;
        data["agilityCompetition"] = this.agilityCompetition;
        data["therapyDog"] = this.therapyDog;
        data["emotionalSupport"] = this.emotionalSupport;
        data["breeding"] = this.breeding;
        data["couchBuddy"] = this.couchBuddy;
        return data; 
    }
}

export interface IRegistrationForm {
    firstName?: string | undefined;
    lastName?: string | undefined;
    street?: string | undefined;
    street2?: string | undefined;
    city?: string | undefined;
    state?: string | undefined;
    country?: string | undefined;
    zip?: string | undefined;
    email?: string | undefined;
    phone?: string | undefined;
    pronunciation: boolean;
    companyHome?: string | undefined;
    preferedGender?: string | undefined;
    showCompetition?: string | undefined;
    agilityCompetition?: string | undefined;
    therapyDog?: string | undefined;
    emotionalSupport?: string | undefined;
    breeding?: string | undefined;
    couchBuddy?: string | undefined;
}

export class Dog implements IDog {
    id!: number;
    name?: string | undefined;
    titles?: string | undefined;
    color?: string | undefined;
    biteType?: string | undefined;
    weight!: number;
    description?: string | undefined;
    birthdate!: Date;
    gender?: string | undefined;
    pictures?: Picture[] | undefined;

    constructor(data?: IDog) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.titles = data["titles"];
            this.color = data["color"];
            this.biteType = data["biteType"];
            this.weight = data["weight"];
            this.description = data["description"];
            this.birthdate = data["birthdate"] ? new Date(data["birthdate"].toString()) : <any>undefined;
            this.gender = data["gender"];
            if (data["pictures"] && data["pictures"].constructor === Array) {
                this.pictures = [] as any;
                for (let item of data["pictures"])
                    this.pictures!.push(Picture.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Dog {
        data = typeof data === 'object' ? data : {};
        let result = new Dog();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["titles"] = this.titles;
        data["color"] = this.color;
        data["biteType"] = this.biteType;
        data["weight"] = this.weight;
        data["description"] = this.description;
        data["birthdate"] = this.birthdate ? this.birthdate.toISOString() : <any>undefined;
        data["gender"] = this.gender;
        if (this.pictures && this.pictures.constructor === Array) {
            data["pictures"] = [];
            for (let item of this.pictures)
                data["pictures"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IDog {
    id: number;
    name?: string | undefined;
    titles?: string | undefined;
    color?: string | undefined;
    biteType?: string | undefined;
    weight: number;
    description?: string | undefined;
    birthdate: Date;
    gender?: string | undefined;
    pictures?: Picture[] | undefined;
}

export class Picture implements IPicture {
    id!: number;
    dogID!: number;
    fileName?: string | undefined;
    dog?: Dog | undefined;

    constructor(data?: IPicture) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.dogID = data["dogID"];
            this.fileName = data["fileName"];
            this.dog = data["dog"] ? Dog.fromJS(data["dog"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Picture {
        data = typeof data === 'object' ? data : {};
        let result = new Picture();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["dogID"] = this.dogID;
        data["fileName"] = this.fileName;
        data["dog"] = this.dog ? this.dog.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IPicture {
    id: number;
    dogID: number;
    fileName?: string | undefined;
    dog?: Dog | undefined;
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if(result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader(); 
            reader.onload = event => { 
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob); 
        }
    });
}