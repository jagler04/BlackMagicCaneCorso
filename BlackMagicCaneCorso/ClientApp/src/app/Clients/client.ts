/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.1.3.0 (NJsonSchema v10.0.27.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class Client {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    application(model: ApplicationModel): Observable<void> {
        let url_ = this.baseUrl + "/Application";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processApplication(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApplication(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processApplication(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    dog(): Observable<DogModel[]> {
        let url_ = this.baseUrl + "/Dog";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDog(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDog(<any>response_);
                } catch (e) {
                    return <Observable<DogModel[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<DogModel[]>><any>_observableThrow(response_);
        }));
    }

    protected processDog(response: HttpResponseBase): Observable<DogModel[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(DogModel.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<DogModel[]>(<any>null);
    }
}

export class ApplicationModel implements IApplicationModel {
    firstName?: string | undefined;
    lastName?: string | undefined;
    street1?: string | undefined;
    street2?: string | undefined;
    city?: string | undefined;
    state?: string | undefined;
    zipcode?: string | undefined;
    phone?: string | undefined;
    email?: string | undefined;
    showDog?: string | undefined;
    otherActivities?: string | undefined;
    therapyDog?: string | undefined;
    emotionalSupport?: string | undefined;
    breeding?: string | undefined;
    couch?: string | undefined;
    ownedBefore?: string | undefined;
    yard?: string | undefined;
    children?: string | undefined;

    constructor(data?: IApplicationModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.street1 = _data["street1"];
            this.street2 = _data["street2"];
            this.city = _data["city"];
            this.state = _data["state"];
            this.zipcode = _data["zipcode"];
            this.phone = _data["phone"];
            this.email = _data["email"];
            this.showDog = _data["showDog"];
            this.otherActivities = _data["otherActivities"];
            this.therapyDog = _data["therapyDog"];
            this.emotionalSupport = _data["emotionalSupport"];
            this.breeding = _data["breeding"];
            this.couch = _data["couch"];
            this.ownedBefore = _data["ownedBefore"];
            this.yard = _data["yard"];
            this.children = _data["children"];
        }
    }

    static fromJS(data: any): ApplicationModel {
        data = typeof data === 'object' ? data : {};
        let result = new ApplicationModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["street1"] = this.street1;
        data["street2"] = this.street2;
        data["city"] = this.city;
        data["state"] = this.state;
        data["zipcode"] = this.zipcode;
        data["phone"] = this.phone;
        data["email"] = this.email;
        data["showDog"] = this.showDog;
        data["otherActivities"] = this.otherActivities;
        data["therapyDog"] = this.therapyDog;
        data["emotionalSupport"] = this.emotionalSupport;
        data["breeding"] = this.breeding;
        data["couch"] = this.couch;
        data["ownedBefore"] = this.ownedBefore;
        data["yard"] = this.yard;
        data["children"] = this.children;
        return data; 
    }
}

export interface IApplicationModel {
    firstName?: string | undefined;
    lastName?: string | undefined;
    street1?: string | undefined;
    street2?: string | undefined;
    city?: string | undefined;
    state?: string | undefined;
    zipcode?: string | undefined;
    phone?: string | undefined;
    email?: string | undefined;
    showDog?: string | undefined;
    otherActivities?: string | undefined;
    therapyDog?: string | undefined;
    emotionalSupport?: string | undefined;
    breeding?: string | undefined;
    couch?: string | undefined;
    ownedBefore?: string | undefined;
    yard?: string | undefined;
    children?: string | undefined;
}

export class DogModel implements IDogModel {
    id?: string | undefined;
    name?: string | undefined;
    gender?: string | undefined;
    titles?: string | undefined;
    description?: string | undefined;
    images?: ImageModel[] | undefined;
    menuImage?: string | undefined;

    constructor(data?: IDogModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.gender = _data["gender"];
            this.titles = _data["titles"];
            this.description = _data["description"];
            if (Array.isArray(_data["images"])) {
                this.images = [] as any;
                for (let item of _data["images"])
                    this.images!.push(ImageModel.fromJS(item));
            }
            this.menuImage = _data["menuImage"];
        }
    }

    static fromJS(data: any): DogModel {
        data = typeof data === 'object' ? data : {};
        let result = new DogModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["gender"] = this.gender;
        data["titles"] = this.titles;
        data["description"] = this.description;
        if (Array.isArray(this.images)) {
            data["images"] = [];
            for (let item of this.images)
                data["images"].push(item.toJSON());
        }
        data["menuImage"] = this.menuImage;
        return data; 
    }
}

export interface IDogModel {
    id?: string | undefined;
    name?: string | undefined;
    gender?: string | undefined;
    titles?: string | undefined;
    description?: string | undefined;
    images?: ImageModel[] | undefined;
    menuImage?: string | undefined;
}

export class ImageModel implements IImageModel {
    url?: string | undefined;
    isProfile!: boolean;

    constructor(data?: IImageModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.url = _data["url"];
            this.isProfile = _data["isProfile"];
        }
    }

    static fromJS(data: any): ImageModel {
        data = typeof data === 'object' ? data : {};
        let result = new ImageModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["url"] = this.url;
        data["isProfile"] = this.isProfile;
        return data; 
    }
}

export interface IImageModel {
    url?: string | undefined;
    isProfile: boolean;
}

export class ApiException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader(); 
            reader.onload = event => { 
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob); 
        }
    });
}