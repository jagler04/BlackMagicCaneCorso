/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v12.0.10.0 (NJsonSchema v9.13.11.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class PuppiesClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
    this.http = http;
    this.baseUrl = baseUrl ? baseUrl : "";
  }

  requestAPuppy(frm: RegistrationForm): Observable<FileResponse | null> {
    let url_ = this.baseUrl + "/Puppies/Request";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(frm);

    let options_: any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "application/json"
      })
    };

    return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processRequestAPuppy(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processRequestAPuppy(<any>response_);
        } catch (e) {
          return <Observable<FileResponse | null>><any>_observableThrow(e);
        }
      } else
        return <Observable<FileResponse | null>><any>_observableThrow(response_);
    }));
  }

  protected processRequestAPuppy(response: HttpResponseBase): Observable<FileResponse | null> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (<any>response).error instanceof Blob ? (<any>response).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } };
    if (status === 200 || status === 206) {
      const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
      const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
      const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
      return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf<FileResponse | null>(<any>null);
  }
}

export class RegistrationForm implements IRegistrationForm {
  firstName?: string | undefined;
  lastName?: string | undefined;
  street?: string | undefined;
  street2?: string | undefined;
  city?: string | undefined;
  state?: string | undefined;
  country?: string | undefined;
  zip?: string | undefined;
  email?: string | undefined;
  phone?: string | undefined;
  pronunciation!: boolean;
  companyHome?: string | undefined;
  preferedGender?: string | undefined;
  showCompetition?: string | undefined;
  agilityCompetition?: string | undefined;
  therapyDog?: string | undefined;
  emotionalSupport?: string | undefined;
  breeding?: string | undefined;
  couchBuddy?: string | undefined;

  constructor(data?: IRegistrationForm) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(data?: any) {
    if (data) {
      this.firstName = data["firstName"];
      this.lastName = data["lastName"];
      this.street = data["street"];
      this.street2 = data["street2"];
      this.city = data["city"];
      this.state = data["state"];
      this.country = data["country"];
      this.zip = data["zip"];
      this.email = data["email"];
      this.phone = data["phone"];
      this.pronunciation = data["pronunciation"];
      this.companyHome = data["companyHome"];
      this.preferedGender = data["preferedGender"];
      this.showCompetition = data["showCompetition"];
      this.agilityCompetition = data["agilityCompetition"];
      this.therapyDog = data["therapyDog"];
      this.emotionalSupport = data["emotionalSupport"];
      this.breeding = data["breeding"];
      this.couchBuddy = data["couchBuddy"];
    }
  }

  static fromJS(data: any): RegistrationForm {
    data = typeof data === 'object' ? data : {};
    let result = new RegistrationForm();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["firstName"] = this.firstName;
    data["lastName"] = this.lastName;
    data["street"] = this.street;
    data["street2"] = this.street2;
    data["city"] = this.city;
    data["state"] = this.state;
    data["country"] = this.country;
    data["zip"] = this.zip;
    data["email"] = this.email;
    data["phone"] = this.phone;
    data["pronunciation"] = this.pronunciation;
    data["companyHome"] = this.companyHome;
    data["preferedGender"] = this.preferedGender;
    data["showCompetition"] = this.showCompetition;
    data["agilityCompetition"] = this.agilityCompetition;
    data["therapyDog"] = this.therapyDog;
    data["emotionalSupport"] = this.emotionalSupport;
    data["breeding"] = this.breeding;
    data["couchBuddy"] = this.couchBuddy;
    return data;
  }
}

export interface IRegistrationForm {
  firstName?: string | undefined;
  lastName?: string | undefined;
  street?: string | undefined;
  street2?: string | undefined;
  city?: string | undefined;
  state?: string | undefined;
  country?: string | undefined;
  zip?: string | undefined;
  email?: string | undefined;
  phone?: string | undefined;
  pronunciation: boolean;
  companyHome?: string | undefined;
  preferedGender?: string | undefined;
  showCompetition?: string | undefined;
  agilityCompetition?: string | undefined;
  therapyDog?: string | undefined;
  emotionalSupport?: string | undefined;
  breeding?: string | undefined;
  couchBuddy?: string | undefined;
}

export interface FileResponse {
  data: Blob;
  status: number;
  fileName?: string;
  headers?: { [name: string]: any };
}

export class SwaggerException extends Error {
  message: string;
  status: number;
  response: string;
  headers: { [key: string]: any; };
  result: any;

  constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
    super();

    this.message = message;
    this.status = status;
    this.response = response;
    this.headers = headers;
    this.result = result;
  }

  protected isSwaggerException = true;

  static isSwaggerException(obj: any): obj is SwaggerException {
    return obj.isSwaggerException === true;
  }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
  if (result !== null && result !== undefined)
    return _observableThrow(result);
  else
    return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
  return new Observable<string>((observer: any) => {
    if (!blob) {
      observer.next("");
      observer.complete();
    } else {
      let reader = new FileReader();
      reader.onload = event => {
        observer.next((<any>event.target).result);
        observer.complete();
      };
      reader.readAsText(blob);
    }
  });
}
